package aed;

import java.util.*;


// Todos los tipos de datos "Comparables" tienen el mÃ©todo compareTo()
// elem1.compareTo(elem2) devuelve un entero. Si es mayor a 0, entonces elem1 > elem2
public class ABB<T extends Comparable<T>> implements Conjunto<T> {
    private Nodo raiz;
    private int cardinal;

    private class Nodo {
        T valor;
        Nodo izq;
        Nodo der;
        Nodo raiz;

        Nodo(T e) {
            valor = e;
            izq = null;
            der = null;
            raiz = null;
        }
        
    }

    public ABB() {
        raiz = null;
        cardinal = 0;
    }

    public int cardinal() {
        return cardinal;
    
    }

    public T minimo(){
        if(raiz == null){
            return null;
        } else {
            Nodo actual = raiz;
            while(actual.izq != null){
                actual = actual.izq;
            }
            return actual.valor;
        }
    }

    public T maximo(){
        if(raiz == null){
            return null;
        } else {
            Nodo actual = raiz;
            while (actual.der != null){
                actual = actual.der;
            }
            return actual.valor;
        }
    }

    public void insertar(T elem){
        Nodo actual = raiz;
        Nodo nuevo = new Nodo(elem);
        if(raiz == null){
            raiz = nuevo;
            cardinal++;
        }    
        else {
            while(elem.compareTo(actual.valor) != 0){
                if(elem.compareTo(actual.valor) < 0){
                    if(actual.izq != null){
                        actual = actual.izq;
                    }
                    else { 
                        actual.izq = nuevo;
                        nuevo.raiz = actual;
                        cardinal++;

                    }
                }
                else{
                    if(actual.der != null){
                        actual= actual.der;
                    } 
                    else {
                        actual.der = nuevo;
                        nuevo.raiz= actual;
                        cardinal++;
                    }
            
            
                }
            }
        
        }
    
    }
            

     public boolean pertenece(T elem){
        if(raiz== null){
            return false;
        }
        else{
            Nodo actual = raiz;
            while(elem.compareTo(actual.valor) != 0){
                if(elem.compareTo(actual.valor) < 0 ){
                    if(actual.izq != null){
                        actual = actual.izq;
                    } else{
                        return false;
                    }
                    
                }
                else {
                    if(actual.der != null){
                        actual = actual.der;
                    } else {
                        return false;
                    }
                }
            }
            return true;
            
            
            
        }
    }

    public void eliminar(T elem) {
        if (pertenece(elem)) {
            raiz = eliminarRecursivo(raiz, elem);
            cardinal--;
        }
    }

    private Nodo eliminarRecursivo(Nodo nodo, T elem) {
        if (nodo == null)
            return null;
        if (elem.compareTo(nodo.valor) < 0) {
            nodo.izq = eliminarRecursivo(nodo.izq, elem);
        } else if (elem.compareTo(nodo.valor) > 0) {
            nodo.der = eliminarRecursivo(nodo.der, elem);
        } else {
            if (nodo.izq == null)
                return nodo.der;
            else if (nodo.der == null)
                return nodo.izq;
            nodo.valor = nodominimo(nodo.der);
            nodo.der = eliminarRecursivo(nodo.der, nodo.valor);
        }
        return nodo;
    }

    private T nodominimo(Nodo nodo) {
        T min = nodo.valor;
        while (nodo.izq != null) {
            min = nodo.izq.valor;
            nodo = nodo.izq;
        }
        return min;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        inorden(raiz, sb);
        if(sb.length()>1){
            sb.setLength(sb.length()-1);
        }
        sb.append("}");
        return sb.toString();
        
    }

    private void inorden(Nodo raiz, StringBuilder sb) {
        if (raiz != null) {
            inorden(raiz.izq, sb);
            sb.append(raiz.valor).append(",");
            inorden(raiz.der, sb);
        }
    }


    private class ABB_Iterador implements Iterador<T> {
        private Nodo _actual= nodoMinimo(raiz);

        private Nodo nodoMinimo(Nodo n){
            while(n.izq !=null){
                n = n.izq;
            }
            return n;
        }

        public boolean haySiguiente() {            
            return _actual != null;
        }
    
        public T siguiente() {
            T res = _actual.valor;
            _actual = sucesor(_actual);

           return res;
        }

        private Nodo sucesor(Nodo n){
            if(_actual.der != null){
                return nodoMinimo(_actual.der);
            } else{
                Nodo antecesor= _actual.raiz;
                if()
            }
        }
    }

    public Iterador<T> iterador() {
        return new ABB_Iterador();
    }

}
